name: Release to GH/GL

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "src/**"

env:
  GITLAB_USERNAME: vikshan

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Set GitLab path
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          echo "GITLAB_PROJECT_PATH=${GITLAB_USERNAME}/${REPO_NAME}" >> $GITHUB_ENV

      - name: Semantic Release
        id: semantic_release
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_AUTHOR_NAME: ${{ github.actor }}
          GIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_COMMITTER_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
        run: bunx semantic-release

      - name: Get latest release tag
        id: get_release_tag
        run: |
          VERSION=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            jq -r '.tag_name' | sed 's/v//')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create GitLab Release
        run: |
          # Check if tag exists remotely
          if ! git ls-remote --tags https://oauth2:${{ secrets.GITLAB_TOKEN }}@gitlab.com/${GITLAB_PROJECT_PATH}.git "refs/tags/v${VERSION}" | grep -q "v${VERSION}"; then
            git tag "v${VERSION}" || true
            git push https://oauth2:${{ secrets.GITLAB_TOKEN }}@gitlab.com/${GITLAB_PROJECT_PATH}.git "v${VERSION}"
          fi

          # Get GitHub release notes
          GITHUB_RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")

          RELEASE_NOTES=$(echo $GITHUB_RELEASE | jq -r '.body')
          RELEASE_NOTES=${RELEASE_NOTES:-"Release v${VERSION}"}
          ESCAPED_NOTES=$(echo "$RELEASE_NOTES" | jq -R -s '.')

          # Create GitLab release using project path
          curl --fail --request POST \
            --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data "{
              \"name\": \"v${VERSION}\",
              \"tag_name\": \"v${VERSION}\",
              \"description\": ${ESCAPED_NOTES}
            }" \
            "https://gitlab.com/api/v4/projects/$(echo ${GITLAB_PROJECT_PATH} | sed 's|/|%2F|g')/releases"

      - name: Sync repositories
        run: |
          bun run f
          git config --global user.email "vixshan@gmail.com"
          git config --global user.name "vixshan"
          git commit --amend --no-edit
          git push -f origin HEAD:${{ github.ref_name }}

          git config --global user.name "vikshan"
          git remote add gitlab https://oauth2:${{ secrets.GITLAB_TOKEN }}@gitlab.com/${GITLAB_PROJECT_PATH}.git
          git push -f gitlab HEAD:${{ github.ref_name }}
